// Generated by view binder compiler. Do not edit!
package com.example.gr.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.gr.R;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityRecordWorkoutBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button autoStartCountdownAbort;

  @NonNull
  public final TextView autoStartCountdownMsg;

  @NonNull
  public final TextView autoStartCountdownVal;

  @NonNull
  public final Guideline guideline2;

  @NonNull
  public final Guideline horizCenterGuideline;

  @NonNull
  public final ImageView imageView3;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final FrameLayout mapFrameView;

  @NonNull
  public final FloatingActionButton mapGpsFocus;

  @NonNull
  public final FrameLayout mapNavigationRoot;

  @NonNull
  public final FloatingActionButton mapZoomIn;

  @NonNull
  public final FloatingActionButton mapZoomOut;

  @NonNull
  public final TextView recordGpsStatus;

  @NonNull
  public final ImageView recordHrStatus;

  @NonNull
  public final TextView recordInfo1Title;

  @NonNull
  public final TextView recordInfo1Value;

  @NonNull
  public final TextView recordInfo2Title;

  @NonNull
  public final TextView recordInfo2Value;

  @NonNull
  public final TextView recordInfo3Title;

  @NonNull
  public final TextView recordInfo3Value;

  @NonNull
  public final TextView recordInfo4Title;

  @NonNull
  public final TextView recordInfo4Value;

  @NonNull
  public final LinearLayout recordInfoRoot;

  @NonNull
  public final TextView recordMapAttribution;

  @NonNull
  public final LinearLayout recordMapViewerRoot;

  @NonNull
  public final Button recordStart;

  @NonNull
  public final ConstraintLayout recordStartButtonsRoot;

  @NonNull
  public final Button recordStartPopup;

  @NonNull
  public final TextView recordTime;

  @NonNull
  public final ConstraintLayout recorderAutoStartOverlay;

  @NonNull
  public final FrameLayout recorderWaitingOverlay;

  @NonNull
  public final TextView recorderWaitingSatellites;

  private ActivityRecordWorkoutBinding(@NonNull RelativeLayout rootView,
      @NonNull Button autoStartCountdownAbort, @NonNull TextView autoStartCountdownMsg,
      @NonNull TextView autoStartCountdownVal, @NonNull Guideline guideline2,
      @NonNull Guideline horizCenterGuideline, @NonNull ImageView imageView3,
      @NonNull LinearLayout linearLayout, @NonNull FrameLayout mapFrameView,
      @NonNull FloatingActionButton mapGpsFocus, @NonNull FrameLayout mapNavigationRoot,
      @NonNull FloatingActionButton mapZoomIn, @NonNull FloatingActionButton mapZoomOut,
      @NonNull TextView recordGpsStatus, @NonNull ImageView recordHrStatus,
      @NonNull TextView recordInfo1Title, @NonNull TextView recordInfo1Value,
      @NonNull TextView recordInfo2Title, @NonNull TextView recordInfo2Value,
      @NonNull TextView recordInfo3Title, @NonNull TextView recordInfo3Value,
      @NonNull TextView recordInfo4Title, @NonNull TextView recordInfo4Value,
      @NonNull LinearLayout recordInfoRoot, @NonNull TextView recordMapAttribution,
      @NonNull LinearLayout recordMapViewerRoot, @NonNull Button recordStart,
      @NonNull ConstraintLayout recordStartButtonsRoot, @NonNull Button recordStartPopup,
      @NonNull TextView recordTime, @NonNull ConstraintLayout recorderAutoStartOverlay,
      @NonNull FrameLayout recorderWaitingOverlay, @NonNull TextView recorderWaitingSatellites) {
    this.rootView = rootView;
    this.autoStartCountdownAbort = autoStartCountdownAbort;
    this.autoStartCountdownMsg = autoStartCountdownMsg;
    this.autoStartCountdownVal = autoStartCountdownVal;
    this.guideline2 = guideline2;
    this.horizCenterGuideline = horizCenterGuideline;
    this.imageView3 = imageView3;
    this.linearLayout = linearLayout;
    this.mapFrameView = mapFrameView;
    this.mapGpsFocus = mapGpsFocus;
    this.mapNavigationRoot = mapNavigationRoot;
    this.mapZoomIn = mapZoomIn;
    this.mapZoomOut = mapZoomOut;
    this.recordGpsStatus = recordGpsStatus;
    this.recordHrStatus = recordHrStatus;
    this.recordInfo1Title = recordInfo1Title;
    this.recordInfo1Value = recordInfo1Value;
    this.recordInfo2Title = recordInfo2Title;
    this.recordInfo2Value = recordInfo2Value;
    this.recordInfo3Title = recordInfo3Title;
    this.recordInfo3Value = recordInfo3Value;
    this.recordInfo4Title = recordInfo4Title;
    this.recordInfo4Value = recordInfo4Value;
    this.recordInfoRoot = recordInfoRoot;
    this.recordMapAttribution = recordMapAttribution;
    this.recordMapViewerRoot = recordMapViewerRoot;
    this.recordStart = recordStart;
    this.recordStartButtonsRoot = recordStartButtonsRoot;
    this.recordStartPopup = recordStartPopup;
    this.recordTime = recordTime;
    this.recorderAutoStartOverlay = recorderAutoStartOverlay;
    this.recorderWaitingOverlay = recorderWaitingOverlay;
    this.recorderWaitingSatellites = recorderWaitingSatellites;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityRecordWorkoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityRecordWorkoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_record_workout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityRecordWorkoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.autoStartCountdownAbort;
      Button autoStartCountdownAbort = ViewBindings.findChildViewById(rootView, id);
      if (autoStartCountdownAbort == null) {
        break missingId;
      }

      id = R.id.autoStartCountdownMsg;
      TextView autoStartCountdownMsg = ViewBindings.findChildViewById(rootView, id);
      if (autoStartCountdownMsg == null) {
        break missingId;
      }

      id = R.id.autoStartCountdownVal;
      TextView autoStartCountdownVal = ViewBindings.findChildViewById(rootView, id);
      if (autoStartCountdownVal == null) {
        break missingId;
      }

      id = R.id.guideline2;
      Guideline guideline2 = ViewBindings.findChildViewById(rootView, id);
      if (guideline2 == null) {
        break missingId;
      }

      id = R.id.horizCenterGuideline;
      Guideline horizCenterGuideline = ViewBindings.findChildViewById(rootView, id);
      if (horizCenterGuideline == null) {
        break missingId;
      }

      id = R.id.imageView3;
      ImageView imageView3 = ViewBindings.findChildViewById(rootView, id);
      if (imageView3 == null) {
        break missingId;
      }

      id = R.id.linearLayout;
      LinearLayout linearLayout = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout == null) {
        break missingId;
      }

      id = R.id.mapFrameView;
      FrameLayout mapFrameView = ViewBindings.findChildViewById(rootView, id);
      if (mapFrameView == null) {
        break missingId;
      }

      id = R.id.mapGpsFocus;
      FloatingActionButton mapGpsFocus = ViewBindings.findChildViewById(rootView, id);
      if (mapGpsFocus == null) {
        break missingId;
      }

      id = R.id.mapNavigationRoot;
      FrameLayout mapNavigationRoot = ViewBindings.findChildViewById(rootView, id);
      if (mapNavigationRoot == null) {
        break missingId;
      }

      id = R.id.mapZoomIn;
      FloatingActionButton mapZoomIn = ViewBindings.findChildViewById(rootView, id);
      if (mapZoomIn == null) {
        break missingId;
      }

      id = R.id.mapZoomOut;
      FloatingActionButton mapZoomOut = ViewBindings.findChildViewById(rootView, id);
      if (mapZoomOut == null) {
        break missingId;
      }

      id = R.id.recordGpsStatus;
      TextView recordGpsStatus = ViewBindings.findChildViewById(rootView, id);
      if (recordGpsStatus == null) {
        break missingId;
      }

      id = R.id.recordHrStatus;
      ImageView recordHrStatus = ViewBindings.findChildViewById(rootView, id);
      if (recordHrStatus == null) {
        break missingId;
      }

      id = R.id.recordInfo1Title;
      TextView recordInfo1Title = ViewBindings.findChildViewById(rootView, id);
      if (recordInfo1Title == null) {
        break missingId;
      }

      id = R.id.recordInfo1Value;
      TextView recordInfo1Value = ViewBindings.findChildViewById(rootView, id);
      if (recordInfo1Value == null) {
        break missingId;
      }

      id = R.id.recordInfo2Title;
      TextView recordInfo2Title = ViewBindings.findChildViewById(rootView, id);
      if (recordInfo2Title == null) {
        break missingId;
      }

      id = R.id.recordInfo2Value;
      TextView recordInfo2Value = ViewBindings.findChildViewById(rootView, id);
      if (recordInfo2Value == null) {
        break missingId;
      }

      id = R.id.recordInfo3Title;
      TextView recordInfo3Title = ViewBindings.findChildViewById(rootView, id);
      if (recordInfo3Title == null) {
        break missingId;
      }

      id = R.id.recordInfo3Value;
      TextView recordInfo3Value = ViewBindings.findChildViewById(rootView, id);
      if (recordInfo3Value == null) {
        break missingId;
      }

      id = R.id.recordInfo4Title;
      TextView recordInfo4Title = ViewBindings.findChildViewById(rootView, id);
      if (recordInfo4Title == null) {
        break missingId;
      }

      id = R.id.recordInfo4Value;
      TextView recordInfo4Value = ViewBindings.findChildViewById(rootView, id);
      if (recordInfo4Value == null) {
        break missingId;
      }

      id = R.id.recordInfoRoot;
      LinearLayout recordInfoRoot = ViewBindings.findChildViewById(rootView, id);
      if (recordInfoRoot == null) {
        break missingId;
      }

      id = R.id.recordMapAttribution;
      TextView recordMapAttribution = ViewBindings.findChildViewById(rootView, id);
      if (recordMapAttribution == null) {
        break missingId;
      }

      id = R.id.recordMapViewerRoot;
      LinearLayout recordMapViewerRoot = ViewBindings.findChildViewById(rootView, id);
      if (recordMapViewerRoot == null) {
        break missingId;
      }

      id = R.id.recordStart;
      Button recordStart = ViewBindings.findChildViewById(rootView, id);
      if (recordStart == null) {
        break missingId;
      }

      id = R.id.recordStartButtonsRoot;
      ConstraintLayout recordStartButtonsRoot = ViewBindings.findChildViewById(rootView, id);
      if (recordStartButtonsRoot == null) {
        break missingId;
      }

      id = R.id.recordStartPopup;
      Button recordStartPopup = ViewBindings.findChildViewById(rootView, id);
      if (recordStartPopup == null) {
        break missingId;
      }

      id = R.id.recordTime;
      TextView recordTime = ViewBindings.findChildViewById(rootView, id);
      if (recordTime == null) {
        break missingId;
      }

      id = R.id.recorderAutoStartOverlay;
      ConstraintLayout recorderAutoStartOverlay = ViewBindings.findChildViewById(rootView, id);
      if (recorderAutoStartOverlay == null) {
        break missingId;
      }

      id = R.id.recorderWaitingOverlay;
      FrameLayout recorderWaitingOverlay = ViewBindings.findChildViewById(rootView, id);
      if (recorderWaitingOverlay == null) {
        break missingId;
      }

      id = R.id.recorderWaitingSatellites;
      TextView recorderWaitingSatellites = ViewBindings.findChildViewById(rootView, id);
      if (recorderWaitingSatellites == null) {
        break missingId;
      }

      return new ActivityRecordWorkoutBinding((RelativeLayout) rootView, autoStartCountdownAbort,
          autoStartCountdownMsg, autoStartCountdownVal, guideline2, horizCenterGuideline,
          imageView3, linearLayout, mapFrameView, mapGpsFocus, mapNavigationRoot, mapZoomIn,
          mapZoomOut, recordGpsStatus, recordHrStatus, recordInfo1Title, recordInfo1Value,
          recordInfo2Title, recordInfo2Value, recordInfo3Title, recordInfo3Value, recordInfo4Title,
          recordInfo4Value, recordInfoRoot, recordMapAttribution, recordMapViewerRoot, recordStart,
          recordStartButtonsRoot, recordStartPopup, recordTime, recorderAutoStartOverlay,
          recorderWaitingOverlay, recorderWaitingSatellites);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
