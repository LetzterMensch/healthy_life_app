// Generated by view binder compiler. Do not edit!
package com.example.gr.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.core.widget.NestedScrollView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.gr.R;
import com.github.mikephil.charting.charts.LineChart;
import com.google.android.material.progressindicator.LinearProgressIndicator;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentSleepBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final SwipeRefreshLayout activitySwipeLayout;

  @NonNull
  public final RelativeLayout calendarToolbar;

  @NonNull
  public final CardView chartCardView;

  @NonNull
  public final TextView date;

  @NonNull
  public final TextView deepSleepHr;

  @NonNull
  public final LinearProgressIndicator deepSleepIndicator;

  @NonNull
  public final TextView deepSleepPercentage;

  @NonNull
  public final LinearLayout lateSleep;

  @NonNull
  public final TextView lateSleepLabel;

  @NonNull
  public final TextView lightSleep;

  @NonNull
  public final LinearProgressIndicator lightSleepIndicator;

  @NonNull
  public final TextView lightSleepPercentage;

  @NonNull
  public final NestedScrollView nestedScrollView;

  @NonNull
  public final LinearLayout notEnoughDeepSleep;

  @NonNull
  public final LinearLayout notEnoughSleep;

  @NonNull
  public final TextView notEnoughSleepLabel;

  @NonNull
  public final TextView remSleep;

  @NonNull
  public final LinearProgressIndicator remSleepIndicator;

  @NonNull
  public final TextView remSleepPercentage;

  @NonNull
  public final ImageView sleepFragmentImgBack;

  @NonNull
  public final ImageView sleepFragmentImgNext;

  @NonNull
  public final TextView sleepScore;

  @NonNull
  public final CardView sleepScoreCardView;

  @NonNull
  public final LinearLayout sleepTooMuch;

  @NonNull
  public final LineChart sleepchart;

  @NonNull
  public final CardView summaryCardView;

  @NonNull
  public final TextView totalSleepTime;

  @NonNull
  public final LinearLayout wakeUpManyTimes;

  @NonNull
  public final TextView wakeUpManyTimesFact;

  @NonNull
  public final TextView wakeUpManyTimesLabel;

  private FragmentSleepBinding(@NonNull ConstraintLayout rootView,
      @NonNull SwipeRefreshLayout activitySwipeLayout, @NonNull RelativeLayout calendarToolbar,
      @NonNull CardView chartCardView, @NonNull TextView date, @NonNull TextView deepSleepHr,
      @NonNull LinearProgressIndicator deepSleepIndicator, @NonNull TextView deepSleepPercentage,
      @NonNull LinearLayout lateSleep, @NonNull TextView lateSleepLabel,
      @NonNull TextView lightSleep, @NonNull LinearProgressIndicator lightSleepIndicator,
      @NonNull TextView lightSleepPercentage, @NonNull NestedScrollView nestedScrollView,
      @NonNull LinearLayout notEnoughDeepSleep, @NonNull LinearLayout notEnoughSleep,
      @NonNull TextView notEnoughSleepLabel, @NonNull TextView remSleep,
      @NonNull LinearProgressIndicator remSleepIndicator, @NonNull TextView remSleepPercentage,
      @NonNull ImageView sleepFragmentImgBack, @NonNull ImageView sleepFragmentImgNext,
      @NonNull TextView sleepScore, @NonNull CardView sleepScoreCardView,
      @NonNull LinearLayout sleepTooMuch, @NonNull LineChart sleepchart,
      @NonNull CardView summaryCardView, @NonNull TextView totalSleepTime,
      @NonNull LinearLayout wakeUpManyTimes, @NonNull TextView wakeUpManyTimesFact,
      @NonNull TextView wakeUpManyTimesLabel) {
    this.rootView = rootView;
    this.activitySwipeLayout = activitySwipeLayout;
    this.calendarToolbar = calendarToolbar;
    this.chartCardView = chartCardView;
    this.date = date;
    this.deepSleepHr = deepSleepHr;
    this.deepSleepIndicator = deepSleepIndicator;
    this.deepSleepPercentage = deepSleepPercentage;
    this.lateSleep = lateSleep;
    this.lateSleepLabel = lateSleepLabel;
    this.lightSleep = lightSleep;
    this.lightSleepIndicator = lightSleepIndicator;
    this.lightSleepPercentage = lightSleepPercentage;
    this.nestedScrollView = nestedScrollView;
    this.notEnoughDeepSleep = notEnoughDeepSleep;
    this.notEnoughSleep = notEnoughSleep;
    this.notEnoughSleepLabel = notEnoughSleepLabel;
    this.remSleep = remSleep;
    this.remSleepIndicator = remSleepIndicator;
    this.remSleepPercentage = remSleepPercentage;
    this.sleepFragmentImgBack = sleepFragmentImgBack;
    this.sleepFragmentImgNext = sleepFragmentImgNext;
    this.sleepScore = sleepScore;
    this.sleepScoreCardView = sleepScoreCardView;
    this.sleepTooMuch = sleepTooMuch;
    this.sleepchart = sleepchart;
    this.summaryCardView = summaryCardView;
    this.totalSleepTime = totalSleepTime;
    this.wakeUpManyTimes = wakeUpManyTimes;
    this.wakeUpManyTimesFact = wakeUpManyTimesFact;
    this.wakeUpManyTimesLabel = wakeUpManyTimesLabel;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentSleepBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentSleepBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_sleep, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentSleepBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.activity_swipe_layout;
      SwipeRefreshLayout activitySwipeLayout = ViewBindings.findChildViewById(rootView, id);
      if (activitySwipeLayout == null) {
        break missingId;
      }

      id = R.id.calendar_toolbar;
      RelativeLayout calendarToolbar = ViewBindings.findChildViewById(rootView, id);
      if (calendarToolbar == null) {
        break missingId;
      }

      id = R.id.chartCardView;
      CardView chartCardView = ViewBindings.findChildViewById(rootView, id);
      if (chartCardView == null) {
        break missingId;
      }

      id = R.id.date;
      TextView date = ViewBindings.findChildViewById(rootView, id);
      if (date == null) {
        break missingId;
      }

      id = R.id.deep_sleep_hr;
      TextView deepSleepHr = ViewBindings.findChildViewById(rootView, id);
      if (deepSleepHr == null) {
        break missingId;
      }

      id = R.id.deep_sleep_indicator;
      LinearProgressIndicator deepSleepIndicator = ViewBindings.findChildViewById(rootView, id);
      if (deepSleepIndicator == null) {
        break missingId;
      }

      id = R.id.deep_sleep_percentage;
      TextView deepSleepPercentage = ViewBindings.findChildViewById(rootView, id);
      if (deepSleepPercentage == null) {
        break missingId;
      }

      id = R.id.late_sleep;
      LinearLayout lateSleep = ViewBindings.findChildViewById(rootView, id);
      if (lateSleep == null) {
        break missingId;
      }

      id = R.id.late_sleep_label;
      TextView lateSleepLabel = ViewBindings.findChildViewById(rootView, id);
      if (lateSleepLabel == null) {
        break missingId;
      }

      id = R.id.light_sleep;
      TextView lightSleep = ViewBindings.findChildViewById(rootView, id);
      if (lightSleep == null) {
        break missingId;
      }

      id = R.id.light_sleep_indicator;
      LinearProgressIndicator lightSleepIndicator = ViewBindings.findChildViewById(rootView, id);
      if (lightSleepIndicator == null) {
        break missingId;
      }

      id = R.id.light_sleep_percentage;
      TextView lightSleepPercentage = ViewBindings.findChildViewById(rootView, id);
      if (lightSleepPercentage == null) {
        break missingId;
      }

      id = R.id.nestedScrollView;
      NestedScrollView nestedScrollView = ViewBindings.findChildViewById(rootView, id);
      if (nestedScrollView == null) {
        break missingId;
      }

      id = R.id.not_enough_deep_sleep;
      LinearLayout notEnoughDeepSleep = ViewBindings.findChildViewById(rootView, id);
      if (notEnoughDeepSleep == null) {
        break missingId;
      }

      id = R.id.not_enough_sleep;
      LinearLayout notEnoughSleep = ViewBindings.findChildViewById(rootView, id);
      if (notEnoughSleep == null) {
        break missingId;
      }

      id = R.id.not_enough_sleep_label;
      TextView notEnoughSleepLabel = ViewBindings.findChildViewById(rootView, id);
      if (notEnoughSleepLabel == null) {
        break missingId;
      }

      id = R.id.rem_sleep;
      TextView remSleep = ViewBindings.findChildViewById(rootView, id);
      if (remSleep == null) {
        break missingId;
      }

      id = R.id.rem_sleep_indicator;
      LinearProgressIndicator remSleepIndicator = ViewBindings.findChildViewById(rootView, id);
      if (remSleepIndicator == null) {
        break missingId;
      }

      id = R.id.rem_sleep_percentage;
      TextView remSleepPercentage = ViewBindings.findChildViewById(rootView, id);
      if (remSleepPercentage == null) {
        break missingId;
      }

      id = R.id.sleep_fragment_img_back;
      ImageView sleepFragmentImgBack = ViewBindings.findChildViewById(rootView, id);
      if (sleepFragmentImgBack == null) {
        break missingId;
      }

      id = R.id.sleep_fragment_img_next;
      ImageView sleepFragmentImgNext = ViewBindings.findChildViewById(rootView, id);
      if (sleepFragmentImgNext == null) {
        break missingId;
      }

      id = R.id.sleep_score;
      TextView sleepScore = ViewBindings.findChildViewById(rootView, id);
      if (sleepScore == null) {
        break missingId;
      }

      id = R.id.sleepScoreCardView;
      CardView sleepScoreCardView = ViewBindings.findChildViewById(rootView, id);
      if (sleepScoreCardView == null) {
        break missingId;
      }

      id = R.id.sleep_too_much;
      LinearLayout sleepTooMuch = ViewBindings.findChildViewById(rootView, id);
      if (sleepTooMuch == null) {
        break missingId;
      }

      id = R.id.sleepchart;
      LineChart sleepchart = ViewBindings.findChildViewById(rootView, id);
      if (sleepchart == null) {
        break missingId;
      }

      id = R.id.summaryCardView;
      CardView summaryCardView = ViewBindings.findChildViewById(rootView, id);
      if (summaryCardView == null) {
        break missingId;
      }

      id = R.id.total_sleep_time;
      TextView totalSleepTime = ViewBindings.findChildViewById(rootView, id);
      if (totalSleepTime == null) {
        break missingId;
      }

      id = R.id.wake_up_many_times;
      LinearLayout wakeUpManyTimes = ViewBindings.findChildViewById(rootView, id);
      if (wakeUpManyTimes == null) {
        break missingId;
      }

      id = R.id.wake_up_many_times_fact;
      TextView wakeUpManyTimesFact = ViewBindings.findChildViewById(rootView, id);
      if (wakeUpManyTimesFact == null) {
        break missingId;
      }

      id = R.id.wake_up_many_times_label;
      TextView wakeUpManyTimesLabel = ViewBindings.findChildViewById(rootView, id);
      if (wakeUpManyTimesLabel == null) {
        break missingId;
      }

      return new FragmentSleepBinding((ConstraintLayout) rootView, activitySwipeLayout,
          calendarToolbar, chartCardView, date, deepSleepHr, deepSleepIndicator,
          deepSleepPercentage, lateSleep, lateSleepLabel, lightSleep, lightSleepIndicator,
          lightSleepPercentage, nestedScrollView, notEnoughDeepSleep, notEnoughSleep,
          notEnoughSleepLabel, remSleep, remSleepIndicator, remSleepPercentage,
          sleepFragmentImgBack, sleepFragmentImgNext, sleepScore, sleepScoreCardView, sleepTooMuch,
          sleepchart, summaryCardView, totalSleepTime, wakeUpManyTimes, wakeUpManyTimesFact,
          wakeUpManyTimesLabel);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
