package com.example.gr.model.database.entities;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 71): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 71;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        UserAttributesDao.createTable(db, ifNotExists);
        UserDao.createTable(db, ifNotExists);
        DeviceAttributesDao.createTable(db, ifNotExists);
        DeviceDao.createTable(db, ifNotExists);
        TagDao.createTable(db, ifNotExists);
        ActivityDescriptionDao.createTable(db, ifNotExists);
        ActivityDescTagLinkDao.createTable(db, ifNotExists);
        MiBandActivitySampleDao.createTable(db, ifNotExists);
        HuamiExtendedActivitySampleDao.createTable(db, ifNotExists);
        HuamiStressSampleDao.createTable(db, ifNotExists);
        HuamiSpo2SampleDao.createTable(db, ifNotExists);
        HuamiHeartRateManualSampleDao.createTable(db, ifNotExists);
        HuamiHeartRateMaxSampleDao.createTable(db, ifNotExists);
        HuamiHeartRateRestingSampleDao.createTable(db, ifNotExists);
        HuamiPaiSampleDao.createTable(db, ifNotExists);
        HuamiSleepRespiratoryRateSampleDao.createTable(db, ifNotExists);
        CalendarSyncStateDao.createTable(db, ifNotExists);
        AlarmDao.createTable(db, ifNotExists);
        ReminderDao.createTable(db, ifNotExists);
        WorldClockDao.createTable(db, ifNotExists);
        ContactDao.createTable(db, ifNotExists);
        AppSpecificNotificationSettingDao.createTable(db, ifNotExists);
        NotificationFilterDao.createTable(db, ifNotExists);
        NotificationFilterEntryDao.createTable(db, ifNotExists);
        BaseActivitySummaryDao.createTable(db, ifNotExists);
        BatteryLevelDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        UserAttributesDao.dropTable(db, ifExists);
        UserDao.dropTable(db, ifExists);
        DeviceAttributesDao.dropTable(db, ifExists);
        DeviceDao.dropTable(db, ifExists);
        TagDao.dropTable(db, ifExists);
        ActivityDescriptionDao.dropTable(db, ifExists);
        ActivityDescTagLinkDao.dropTable(db, ifExists);
        MiBandActivitySampleDao.dropTable(db, ifExists);
        HuamiExtendedActivitySampleDao.dropTable(db, ifExists);
        HuamiStressSampleDao.dropTable(db, ifExists);
        HuamiSpo2SampleDao.dropTable(db, ifExists);
        HuamiHeartRateManualSampleDao.dropTable(db, ifExists);
        HuamiHeartRateMaxSampleDao.dropTable(db, ifExists);
        HuamiHeartRateRestingSampleDao.dropTable(db, ifExists);
        HuamiPaiSampleDao.dropTable(db, ifExists);
        HuamiSleepRespiratoryRateSampleDao.dropTable(db, ifExists);
        CalendarSyncStateDao.dropTable(db, ifExists);
        AlarmDao.dropTable(db, ifExists);
        ReminderDao.dropTable(db, ifExists);
        WorldClockDao.dropTable(db, ifExists);
        ContactDao.dropTable(db, ifExists);
        AppSpecificNotificationSettingDao.dropTable(db, ifExists);
        NotificationFilterDao.dropTable(db, ifExists);
        NotificationFilterEntryDao.dropTable(db, ifExists);
        BaseActivitySummaryDao.dropTable(db, ifExists);
        BatteryLevelDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(UserAttributesDao.class);
        registerDaoClass(UserDao.class);
        registerDaoClass(DeviceAttributesDao.class);
        registerDaoClass(DeviceDao.class);
        registerDaoClass(TagDao.class);
        registerDaoClass(ActivityDescriptionDao.class);
        registerDaoClass(ActivityDescTagLinkDao.class);
        registerDaoClass(MiBandActivitySampleDao.class);
        registerDaoClass(HuamiExtendedActivitySampleDao.class);
        registerDaoClass(HuamiStressSampleDao.class);
        registerDaoClass(HuamiSpo2SampleDao.class);
        registerDaoClass(HuamiHeartRateManualSampleDao.class);
        registerDaoClass(HuamiHeartRateMaxSampleDao.class);
        registerDaoClass(HuamiHeartRateRestingSampleDao.class);
        registerDaoClass(HuamiPaiSampleDao.class);
        registerDaoClass(HuamiSleepRespiratoryRateSampleDao.class);
        registerDaoClass(CalendarSyncStateDao.class);
        registerDaoClass(AlarmDao.class);
        registerDaoClass(ReminderDao.class);
        registerDaoClass(WorldClockDao.class);
        registerDaoClass(ContactDao.class);
        registerDaoClass(AppSpecificNotificationSettingDao.class);
        registerDaoClass(NotificationFilterDao.class);
        registerDaoClass(NotificationFilterEntryDao.class);
        registerDaoClass(BaseActivitySummaryDao.class);
        registerDaoClass(BatteryLevelDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
