package com.example.gr.model.database.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALARM".
*/
public class AlarmDao extends AbstractDao<Alarm, Void> {

    public static final String TABLENAME = "ALARM";

    /**
     * Properties of entity Alarm.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property DeviceId = new Property(0, long.class, "deviceId", false, "DEVICE_ID");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property Position = new Property(2, int.class, "position", false, "POSITION");
        public final static Property Enabled = new Property(3, boolean.class, "enabled", false, "ENABLED");
        public final static Property SmartWakeup = new Property(4, boolean.class, "smartWakeup", false, "SMART_WAKEUP");
        public final static Property SmartWakeupInterval = new Property(5, Integer.class, "smartWakeupInterval", false, "SMART_WAKEUP_INTERVAL");
        public final static Property Snooze = new Property(6, boolean.class, "snooze", false, "SNOOZE");
        public final static Property Repetition = new Property(7, int.class, "repetition", false, "REPETITION");
        public final static Property Hour = new Property(8, int.class, "hour", false, "HOUR");
        public final static Property Minute = new Property(9, int.class, "minute", false, "MINUTE");
        public final static Property Unused = new Property(10, boolean.class, "unused", false, "UNUSED");
        public final static Property Title = new Property(11, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(12, String.class, "description", false, "DESCRIPTION");
    };

    private DaoSession daoSession;


    public AlarmDao(DaoConfig config) {
        super(config);
    }
    
    public AlarmDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALARM\" (" + //
                "\"DEVICE_ID\" INTEGER NOT NULL ," + // 0: deviceId
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"POSITION\" INTEGER NOT NULL ," + // 2: position
                "\"ENABLED\" INTEGER NOT NULL ," + // 3: enabled
                "\"SMART_WAKEUP\" INTEGER NOT NULL ," + // 4: smartWakeup
                "\"SMART_WAKEUP_INTERVAL\" INTEGER," + // 5: smartWakeupInterval
                "\"SNOOZE\" INTEGER NOT NULL ," + // 6: snooze
                "\"REPETITION\" INTEGER NOT NULL ," + // 7: repetition
                "\"HOUR\" INTEGER NOT NULL ," + // 8: hour
                "\"MINUTE\" INTEGER NOT NULL ," + // 9: minute
                "\"UNUSED\" INTEGER NOT NULL ," + // 10: unused
                "\"TITLE\" TEXT," + // 11: title
                "\"DESCRIPTION\" TEXT);"); // 12: description
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_ALARM_DEVICE_ID_USER_ID_POSITION ON ALARM" +
                " (\"DEVICE_ID\",\"USER_ID\",\"POSITION\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALARM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Alarm entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getDeviceId());
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getPosition());
        stmt.bindLong(4, entity.getEnabled() ? 1L: 0L);
        stmt.bindLong(5, entity.getSmartWakeup() ? 1L: 0L);
 
        Integer smartWakeupInterval = entity.getSmartWakeupInterval();
        if (smartWakeupInterval != null) {
            stmt.bindLong(6, smartWakeupInterval);
        }
        stmt.bindLong(7, entity.getSnooze() ? 1L: 0L);
        stmt.bindLong(8, entity.getRepetition());
        stmt.bindLong(9, entity.getHour());
        stmt.bindLong(10, entity.getMinute());
        stmt.bindLong(11, entity.getUnused() ? 1L: 0L);
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(12, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(13, description);
        }
    }

    @Override
    protected void attachEntity(Alarm entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Alarm readEntity(Cursor cursor, int offset) {
        Alarm entity = new Alarm( //
            cursor.getLong(offset + 0), // deviceId
            cursor.getLong(offset + 1), // userId
            cursor.getInt(offset + 2), // position
            cursor.getShort(offset + 3) != 0, // enabled
            cursor.getShort(offset + 4) != 0, // smartWakeup
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // smartWakeupInterval
            cursor.getShort(offset + 6) != 0, // snooze
            cursor.getInt(offset + 7), // repetition
            cursor.getInt(offset + 8), // hour
            cursor.getInt(offset + 9), // minute
            cursor.getShort(offset + 10) != 0, // unused
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // title
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // description
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Alarm entity, int offset) {
        entity.setDeviceId(cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setPosition(cursor.getInt(offset + 2));
        entity.setEnabled(cursor.getShort(offset + 3) != 0);
        entity.setSmartWakeup(cursor.getShort(offset + 4) != 0);
        entity.setSmartWakeupInterval(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setSnooze(cursor.getShort(offset + 6) != 0);
        entity.setRepetition(cursor.getInt(offset + 7));
        entity.setHour(cursor.getInt(offset + 8));
        entity.setMinute(cursor.getInt(offset + 9));
        entity.setUnused(cursor.getShort(offset + 10) != 0);
        entity.setTitle(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDescription(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Alarm entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Alarm entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getDeviceDao().getAllColumns());
            builder.append(" FROM ALARM T");
            builder.append(" LEFT JOIN USER T0 ON T.\"USER_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN DEVICE T1 ON T.\"DEVICE_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Alarm loadCurrentDeep(Cursor cursor, boolean lock) {
        Alarm entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
         if(user != null) {
            entity.setUser(user);
        }
        offset += daoSession.getUserDao().getAllColumns().length;

        Device device = loadCurrentOther(daoSession.getDeviceDao(), cursor, offset);
         if(device != null) {
            entity.setDevice(device);
        }

        return entity;    
    }

    public Alarm loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Alarm> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Alarm> list = new ArrayList<Alarm>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Alarm> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Alarm> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
