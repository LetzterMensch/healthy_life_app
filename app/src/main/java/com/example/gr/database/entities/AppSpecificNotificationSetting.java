package com.example.gr.database.entities;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "APP_SPECIFIC_NOTIFICATION_SETTING".
 */
public class AppSpecificNotificationSetting {

    /** Not-null value. */
    private String packageId;
    private long deviceId;
    private String ledPattern;
    private String vibrationPattern;
    private String vibrationRepetition;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AppSpecificNotificationSettingDao myDao;

    private Device device;
    private Long device__resolvedKey;


    public AppSpecificNotificationSetting() {
    }

    public AppSpecificNotificationSetting(String packageId, long deviceId) {
        this.packageId = packageId;
        this.deviceId = deviceId;
    }

    public AppSpecificNotificationSetting(String packageId, long deviceId, String ledPattern, String vibrationPattern, String vibrationRepetition) {
        this.packageId = packageId;
        this.deviceId = deviceId;
        this.ledPattern = ledPattern;
        this.vibrationPattern = vibrationPattern;
        this.vibrationRepetition = vibrationRepetition;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAppSpecificNotificationSettingDao() : null;
    }

    /** Not-null value. */
    public String getPackageId() {
        return packageId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPackageId(String packageId) {
        this.packageId = packageId;
    }

    public long getDeviceId() {
        return deviceId;
    }

    public void setDeviceId(long deviceId) {
        this.deviceId = deviceId;
    }

    public String getLedPattern() {
        return ledPattern;
    }

    public void setLedPattern(String ledPattern) {
        this.ledPattern = ledPattern;
    }

    public String getVibrationPattern() {
        return vibrationPattern;
    }

    public void setVibrationPattern(String vibrationPattern) {
        this.vibrationPattern = vibrationPattern;
    }

    public String getVibrationRepetition() {
        return vibrationRepetition;
    }

    public void setVibrationRepetition(String vibrationRepetition) {
        this.vibrationRepetition = vibrationRepetition;
    }

    /** To-one relationship, resolved on first access. */
    public Device getDevice() {
        long __key = this.deviceId;
        if (device__resolvedKey == null || !device__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DeviceDao targetDao = daoSession.getDeviceDao();
            Device deviceNew = targetDao.load(__key);
            synchronized (this) {
                device = deviceNew;
            	device__resolvedKey = __key;
            }
        }
        return device;
    }

    public void setDevice(Device device) {
        if (device == null) {
            throw new DaoException("To-one property 'deviceId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.device = device;
            deviceId = device.getId();
            device__resolvedKey = deviceId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
